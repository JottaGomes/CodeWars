Write a function that takes a string of parentheses, and determines if the order of the parentheses is valid. The function should return true if the string is valid, and false if it's invalid.

Examples
"()"              =>  true
")(()))"          =>  false
"("               =>  false
"(())((()())())"  =>  true
Constraints
0 <= input.length <= 100

Along with opening (() and closing ()) parenthesis, input may contain any valid ASCII characters. Furthermore, the input string may be empty and/or not contain any parentheses at all. 
Do not treat other forms of brackets as parentheses (e.g. [], {}, <>).

------------------------------------------------- // ----------------------------------------------------------------- // ---------------------------------------------

public class Solution{
  
  public static boolean validParentheses(String parens){ 
        boolean validParaent = false;
        int cont1 = 0;
        int cont2 = 0;
        String [] arr = parens.split("");
        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < arr.length; i++) {
            if (cont1 >= cont2) {

                if (arr[i].equals("(")) {
                    cont1++;
                    sb.append(arr[i]);
                }
                if (arr[i].equals(")")) {
                    cont2++;
                    sb.append(arr[i]);
                }
            }
        }
     if (cont1 == cont2){
            validParaent = true;
        }
        return validParaent;
    }
}